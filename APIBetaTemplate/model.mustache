{{#models}}{{#model}}//
// {{classname}}.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

{{#description}} {{description}} {{/description}}

struct {{classname}} {


    {{#vars}}{{#isEnum}}
    enum {{datatypeWithEnum}}: String { {{#allowableValues}}{{#values}}
                                        case {{enum}} = "{{raw}}"{{/values}}{{/allowableValues}}
    }
    {{/isEnum}}{{/vars}}

    {{#vars}}{{#isEnum}}{{#description}}/** {{description}} */
    {{/description}}var {{name}}: {{{datatypeWithEnum}}}{{^required}}?{{/required}}{{#required}}!{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/isEnum}}{{^isEnum}}{{#description}}/** {{description}} */
    {{/description}}var {{name}}: {{{datatype}}}{{^required}}?{{/required}}{{#required}}!{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/isEnum}}
    {{/vars}}
}

extension {{classname}} : Argo.Decodable {
    static func decode(js: Argo.JSON) -> Decoded<{{classname}}> {
        return curry({{classname}}.init)
            {{#vars}}
                {{#-first}}<^>{{/-first}}{{^-first}}<*>{{/-first}} js <|{{^required}}?{{/required}} "{{name}}"
            {{/vars}}
    }

    func encode() -> [String: AnyObject] {
            var result: [String: AnyObject] = [:]
            {{#vars}}
                {{#isEnum}}
                    result["{{name}}"] = self.{{{name}}}
                {{/isEnum}}
                {{^isEnum}}
                    if let typ = self.{{{name}}} as? Argo.Decodable {
                        result["{{name}}"] = typ.encode()
                    } else {
                        result["{{name}}"] = self.{{{name}}}
                    }
                {{/isEnum}}
        {{/vars}}
        return result
    }
}

{{/model}}
{{/models}}
