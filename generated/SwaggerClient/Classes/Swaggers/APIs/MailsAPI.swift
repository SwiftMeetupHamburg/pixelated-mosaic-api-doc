//
// MailsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit

extension SwaggerClientAPI {
    
    class MailsAPI: APIBase {
    
        /**
         
         Mark as read
         
         - POST /mails/read
         - Marks a list of mails as read\n
         
         :param: mails (body) 

         :returns: Promise<Response<Void>> 
         */
        func mailsReadPost(mails mails: MailIdentsEnvelope) -> RequestBuilder<Void> {
            let path = "/mails/read"
            let url = SwaggerClientAPI.basePath + path
            
            let parameters = mails.encode() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: url, parameters: parameters, isBody: true)
        }
    
        /**
         
         Mark as unread
         
         - POST /mails/unread
         - Marks a list of mails as unread\n
         
         :param: mails (body) 

         :returns: Promise<Response<Void>> 
         */
        func mailsUnreadPost(mails mails: MailIdentsEnvelope) -> RequestBuilder<Void> {
            let path = "/mails/unread"
            let url = SwaggerClientAPI.basePath + path
            
            let parameters = mails.encode() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: url, parameters: parameters, isBody: true)
        }
    
        /**
         
         List of Mails
         
         - GET mails
         - Return a list of mails\n
         - examples: [{example={
  "mails" : [ {
    "tags" : [ "aeiou" ],
    "ident" : { },
    "mailBox" : "aeiou",
    "status" : [ "aeiou" ],
    "textPlainBody" : "aeiou"
  } ]
}, contentType=application/json}]
         
         :param: q (query) Which folder to show. \&quot;tag:inbox\&quot;
         :param: p (query) Which page do we want to see
         :param: w (query) How many items do we want to have returned

         :returns: Promise<Response<MailEnvelope>> 
         */
        func mailsGet(q q: String, p: Int, w: Int) -> RequestBuilder<MailEnvelope> {
            let path = "mails"
            let url = SwaggerClientAPI.basePath + path
            
            let nillableParameters: [String:AnyObject?] = [
                "q": q,
                "p": p,
                "w": w
            ]
            let parameters = APIHelper.rejectNil(nillableParameters)

            let requestBuilder: RequestBuilder<MailEnvelope>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "GET", URLString: url, parameters: parameters, isBody: false)
        }
    
        /**
         
         Creates a mail draft
         
         - PUT mails
         - Creates a new mail draft\n
         
         :param: mail (body) 

         :returns: Promise<Response<Void>> 
         */
        func mailsPut(mail mail: Mail?) -> RequestBuilder<Void> {
            let path = "mails"
            let url = SwaggerClientAPI.basePath + path
            
            let parameters = mail?.encode() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "PUT", URLString: url, parameters: parameters, isBody: true)
        }
    
        /**
         
         Sends a mail
         
         - POST mails
         - Sends a mail. The mail ident of the response may be different to the one specified in body.\n
         - examples: [{example={
  "tags" : [ "aeiou" ],
  "ident" : { },
  "mailBox" : "aeiou",
  "status" : [ "aeiou" ],
  "textPlainBody" : "aeiou"
}, contentType=application/json}]
         
         :param: mail (body) 

         :returns: Promise<Response<Mail>> 
         */
        func mailsPost(mail mail: Mail?) -> RequestBuilder<Mail> {
            let path = "mails"
            let url = SwaggerClientAPI.basePath + path
            
            let parameters = mail?.encode() as? [String:AnyObject]

            let requestBuilder: RequestBuilder<Mail>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

            return requestBuilder.init(method: "POST", URLString: url, parameters: parameters, isBody: true)
        }
    
    }
}
